doctype html
html
  head
    title Quản lý thiết bị phòng thực hành
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css')
  body
    nav.navbar.navbar-expand-lg.navbar-light.bg-primary
      .container-fluid
        a.navbar-brand(href='/')
          img(src='asset/Logo_IUH.png', alt='Logo', style='max-height: 40px; margin-right: 10px;')
          span(style='color: white') Quản lý thiết bị phòng thực hành
    .container.mt-5
      h1.text-center.mt-5 Phòng thực hành X7.6 
      .text-center
        button#start-camera.btn.btn-primary Mở camera
      .mt-4.text-center
        img#camera-stream(
          src='http://192.168.1.25:5000/video',
          alt='Waiting for camera...',
          style='max-width: 100%; border: 1px solid #ccc;'
        )
      h1.text-center.mb-4 Danh sách thiết bị
      if devices && devices.length > 0
        h2 Tổng số thiết bị
        table.table.table-bordered
          thead
            tr
              th Tên thiết bị
              th Số lượng
              th Thời gian kiểm tra
          tbody#device-list
        h2 Thiết bị không tìm thấy
        table.table.table-bordered
          thead
            tr
              th Tên thiết bị
              th Số lượng
              th Thời gian kiểm tra
              th Vị trí cuối cùng
              th Trung tâm cuối cùng
          tbody#missing-list
      else
        p.text-center.text-muted Chưa có lịch sử tìm kiếm.
      .text-center.mt-4
        button#checking.btn.btn-primary Checking

      script(src="/socket.io/socket.io.js")
      script.
        const socket = io();
        let currentDevices = []; // Bộ nhớ tạm để lưu thiết bị đã hiển thị

        // Gửi yêu cầu kiểm tra khi nhấn nút "Checking"
        document.getElementById('checking').addEventListener('click', () => {
          socket.emit('checking');
        });

        // Nhận phản hồi từ server
        socket.on('ml_response', (data) => {
          const deviceList = document.getElementById('device-list');
          const missingList = document.getElementById('missing-list');

          if (data.devices && data.devices.length > 0) {
            data.devices.forEach(device => {
              const name = device.name || "N/A";
              const quantity = device.quantity || 0;
              let checkedAt = "N/A";
              if (data.checkedAt) {
                try {
                  const date = new Date(data.checkedAt);
                  if (!isNaN(date.getTime())) {
                    checkedAt = date.toLocaleString();
                  }
                } catch (error) {
                  console.error("Invalid date format:", data.checkedAt);
                }
              }

              const lastPosition = device.last_position || "N/A";
              const lastCenter = device.last_center || "N/A";

              const deviceRowHtml = `
                <tr>
                  <td>${name}</td>
                  <td>${quantity}</td>
                  <td>${checkedAt}</td>
                </tr>
              `;

              const missingRowHtml = `
                <tr>
                  <td>${name}</td>
                  <td>${quantity}</td>
                  <td>${checkedAt}</td>
                  <td>${lastPosition}</td>
                  <td>${lastCenter}</td>
                </tr>
              `;

              if (!device.missing) {
                let existingRow = Array.from(deviceList.children).find(row => 
                  row.children[0].textContent === name &&
                  row.children[1].textContent === quantity.toString()
                );

                if (!existingRow) {
                  deviceList.innerHTML += deviceRowHtml;
                }

                // Xóa thiết bị khỏi bảng "Thiết bị không tìm thấy" nếu đã được tìm thấy
                let missingRow = Array.from(missingList.children).find(row => 
                  row.children[0].textContent === name &&
                  row.children[1].textContent === quantity.toString()
                );

                if (missingRow) {
                  missingRow.remove();
                }
              } else {
                let existingRow = Array.from(missingList.children).find(row => 
                  row.children[0].textContent === name &&
                  row.children[1].textContent === quantity.toString()
                );

                if (!existingRow) {
                  missingList.innerHTML += missingRowHtml;
                }
              }

              const existingIndex = currentDevices.findIndex(d => 
                d.name === device.name &&
                d.quantity === device.quantity &&
                d.checkedAt === device.checkedAt &&
                d.missing === device.missing &&
                d.last_position === device.last_position &&
                d.last_center === device.last_center
              );
              if (existingIndex === -1) {
                currentDevices.push(device);
              }
            });
          }
        });

        // Bắt đầu stream camera khi nhấn nút "Mở camera"
        document.getElementById('start-camera').addEventListener('click', () => {
          socket.emit('start_camera');
        });

        // Hiển thị frame từ camera
        socket.on('camera_frame', (data) => {
          const imgElement = document.getElementById('camera-stream');
          imgElement.src = `data:image/jpeg;base64,${data.frame}`;
        });

        // Xử lý lỗi camera
        socket.on('camera_error', (data) => {
          alert(data.message);
        });
